# job-definitions.yaml
# defines all necessary parameters for the scheduler to schedule the jobs
# a list requirement will be a dependency of all that run
# Leave empty for a None value
# The order of the jobs in this file is the order in which they will appear in the email

jobs:
  s1_download:
    requirement:
    two-letter-id: "SD"
    parameter-file-step-key: "do_s1_download"
    partition: "normal"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=1"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
    filters:
      sensor: "S1"

  doris:
    requirement: "s1_download"
    two-letter-id: "D5"
    parameter-file-step-key: "do_coregistration"
    partition: "coregistration_partition"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8 --mem-per-cpu=8000"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key: "profile_log*"
    bash-file:
      bash-file-name: "doris_stack.sh"
      bash-file-base-directory: "coregistration"  # expects coregistration_AoI_name & coregistration_directory
      bash-file-directory-appendix: ""
      bash-file-directory-is-reusable: True
    filters:
      sensor: "S1"

  deinsar:
    requirement:
    two-letter-id: "D4"
    parameter-file-step-key: "do_coregistration"
    partition: "coregistration_partition"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8 --mem-per-cpu=8000"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
      bash-file-name: "run_deinsar.sh"
      bash-file-base-directory: "coregistration"  # expects coregistration_AoI_name & coregistration_directory
      bash-file-directory-appendix: ""
      bash-file-directory-is-reusable: True
    filters:
      sensor: ["ERS", "ENV", "TSX", "TDX", "PAZ", "RSAT2", "Cosmo", "ALOS2"]

  doris_cleanup:
    requirement: "doris"
    two-letter-id: "DC"
    parameter-file-step-key: "do_coregistration"
    partition: "short"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=1"
    directory-contents-file-appendix: ""
    email:
      include-in-email: False
      status-file-search-key:
    bash-file:
      bash-file-name: "cleanup.sh"
      bash-file-base-directory: "coregistration"  # expects coregistration_AoI_name & coregistration_directory
      bash-file-directory-appendix: ""
      bash-file-directory-is-reusable: True
    filters:
      sensor: "S1"

  crop_to_raw:
    requirement: ["doris", "deinsar"]
    two-letter-id: "CR"
    parameter-file-step-key: "do_crop_to_raw"
    partition: "crop_to_raw_partition"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
      bash-file-name: "crop-to-raw.sh"
      bash-file-base-directory: "crop_to_raw"
      bash-file-directory-appendix: ""
      bash-file-directory-is-reusable: True
    filters:

  crop_to_zarr:
    requirement: ["doris", "deinsar"]
    two-letter-id: "CZ"
    parameter-file-step-key: "do_crop_to_zarr"
    partition: "crop_to_zarr_partition"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8 --nodes=1"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
      bash-file-name: "crop-to-zarr.sh"
      bash-file-base-directory: "crop_to_zarr"
      bash-file-directory-appendix: ""
      bash-file-directory-is-reusable: True
    filters:

  stm_generation:
    requirement: "crop_to_zarr"
    two-letter-id: "SG"
    parameter-file-step-key: "do_stm_generation"
    partition: "normal"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8 --nodes=1"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
      bash-file-name: "generate-stm.sh"
      bash-file-base-directory: "generate_stm"
      bash-file-directory-appendix: ""
      bash-file-directory-is-reusable: True
    filters:

  depsi:
    requirement: "crop_to_raw"
    two-letter-id: "DE"
    parameter-file-step-key: "do_depsi"
    partition: "depsi_partition"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8 --mem-per-cpu=8000"
    directory-contents-file-appendix: ""
    email:
      include-in-email: True
      status-file-search-key: "*resfile.txt"
    bash-file:
      bash-file-name: "depsi.sh"
      bash-file-base-directory: "depsi"
      bash-file-directory-appendix: "/psi"
      bash-file-directory-is-reusable: False
    filters:

  mrm:
    requirement: "depsi"
    two-letter-id: "MR"
    parameter-file-step-key: "do_depsi_post"
    partition: "normal"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=4 --mem-per-cpu=8000"
    directory-contents-file-appendix: "_mrm"
    email:
      include-in-email: False
      status-file-search-key:
    bash-file:
      bash-file-name: "read_mrm.sh"
      bash-file-base-directory: "depsi"
      bash-file-directory-appendix: "/psi"
      bash-file-directory-is-reusable: False
    filters:

  depsi_post:
    requirement: "mrm"
    two-letter-id: "DP"
    parameter-file-step-key: "do_depsi_post"
    partition: "depsi_post_partition"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=8 --mem-per-cpu=8000"
    directory-contents-file-appendix: "_depsi_post"
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
      bash-file-name: "depsi_post.sh"
      bash-file-base-directory: "depsi"
      bash-file-directory-appendix: "/psi"
      bash-file-directory-is-reusable: False
    filters:

  tarball:
    requirement: "depsi_post"
    two-letter-id: "TB"
    parameter-file-step-key: "do_depsi_post"
    partition: "short"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=1"
    directory-contents-file-appendix: "_tarball"
    email:
      include-in-email: False
      status-file-search-key:
    bash-file:
    filters:
      depsi_post_mode: "tarball"

  portal_upload:
    requirement: "depsi_post"
    two-letter-id: "PU"
    parameter-file-step-key: "do_depsi_post"
    partition: "short"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=1"
    directory-contents-file-appendix: "_portalupload"
    email:
      include-in-email: True
      status-file-search-key:
    bash-file:
    filters:
      depsi_post_mode: "csv"

  email:
    requirement: "*"  # unique use case: this one should wait for every job except itself and is thus handled individually
    two-letter-id: "EM"
    parameter-file-step-key:
    partition: "short"
    sbatch-args: "--qos=long --ntasks=1 --cpus-per-task=1"
    directory-contents-file-appendix: ""
    email:
      include-in-email: False
      status-file-search-key:
    bash-file:
    filters:
